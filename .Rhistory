?file.info
read.csv(paste("y:/Reports/Banner/Argos/Test/", rownames(files)[order(files$mtime)][nrow(files)], sep = ""))
read.csv(paste("y:/Reports/Banner/Argos/Test", rownames(files)[order(files$mtime)][nrow(files)], sep = ""))
read.csv(paste("y:/Reports/Banner/Argos/Test/*.csv", rownames(files)[order(files$mtime)][nrow(files)], sep = ""))
read.csv(paste("y:/Reports/Banner/Argos/Test/", rownames(files)[order(files$mtime)][nrow(files)], sep = ""))
read.csv(paste("y:/Reports/Banner/Argos/Test", rownames(files)[order(files$mtime)][nrow(files)], sep = ""))
finf <- file.info(dir(y:/Reports/Banner/Argos/Test/), extra_cols = FALSE)
finf <- file.info(dir(y:/Reports/Banner/Argos/Test), extra_cols = FALSE)
getwd
getwd()
finf <- file.info(dir("y:/Reports/Banner/Argos/Test"), extra_cols = FALSE)
View(finf)
View(finf)
finf <- file.info(dir("y:/Reports/Banner/Argos/Test"), extra_cols = TRuE)
finf <- file.info(dir("y:/Reports/Banner/Argos/Test"), extra_cols = TRUE)
finf <- file.info(dir("y:/Reports/Banner/Argos/Test/*.csv"), extra_cols = TRUE)
finf <- file.info(dir("y:/Reports/Banner/Argos/Test/*.CSV"), extra_cols = TRUE)
View(finf)
finf <- file.info(dir("y:/Reports/Banner/Argos/Test/"), extra_cols = TRUE)
finf <- file.info(dir("y:/Reports/Banner/Argos/Test/*.CSV"), extra_cols = TRUE)
list.files(y:/Reports/Banner/Argos/Test/)
list.files(y:/Reports/Banner/Argos/Test/"")
list.files("y:/Reports/Banner/Argos/Test/")
details = file.info(list.files(pattern="y:/Reports/Banner/Argos/Test/*.csv"))
details = file.info(list.files(pattern="y:/Reports/Banner/Argos/Test/"))
details = file.info(list.files("y:/Reports/Banner/Argos/Test/*.csv"))
list.files("y:/Reports/Banner/Argos/Test/")
d<-file.info(list.files("y:/Reports/Banner/Argos/Test/"))
d
details = details[with(details, order(as.POSIXct(mtime))), ]
details
Sys.glob(file.path(R.home(), "library", "*", "R", "*.rdx"))
zz <- file.path("Y:", "Reports/Banner/Argos/Test", "*.csv")
normalizePath(zz)
Sys.glob(file.path(normalizePath(zz), "library", "*", "R", "*.rdx"))
data_files <- file.info(Sys.glob("y:/Reports/Banner/Argos/Test/*.csv"))
View(data_files)
View(data_files)
tbl.scholar <- read.csv(row.names(data_files)[which.max(data_files[["ctime"]])]) # find the most recent version
View(tbl.scholar)
View(tbl.scholar)
source('S:/ScholarshipsProject/R/ScholarshipProject/ScholarshipProject.r', echo=TRUE)
mapply(
function(x, y)
df[df$cohort == x & df$studentid == y, which(grepl(x, cols)) + (st_pos - 1):(st_pos + 2)] <<-
df[df$cohort == x & df$studentid == y, which(grepl(x, cols)) + (st_pos - 1)],
df$cohort, df$studentid
)
source('S:/ScholarshipsProject/R/ScholarshipProject/ScholarshipProject.r', echo=TRUE)
View(exception_list)
View(exception_list)
anti1819a <- anti_join(osfa_1819data, tbl.scholar2_current_1, by = c("Recipient.Student.ID.." = "studentid"))
anti1819b <- anti_join(tbl.scholar2_current_1, osfa_1819data, by = c("studentid" = "Recipient.Student.ID..")) # find unmatched
# Example preprocessing script.
# require(stats)
# https://tinyurl.com/ydgy9pfs
data_files <- file.info(Sys.glob("y:/Reports/Banner/Argos/Test/*.csv"))
tbl.scholar <- read.csv(row.names(data_files)[which.max(data_files[["ctime"]])]) # find the most recent version
# import .csv file
# tbl.scholar<-read.csv(row.names(data_files)[which.max(data_files[["ctime"]])], header=TRUE, sep=",", colClasses=c("Date", rep("character",2),"numeric","character", rep("numeric",8)))
# tbl.scholar$spriden_id  <- as.character(tbl.scholar$spriden_id)                                    #convert spriden to character
names(tbl.scholar)[2] <- "studentID" # rename to studentID
names(tbl.scholar)[5] <- "fundCode" # rename to fundCode
# tbl.scholar$SYSDATE <- as.Date(as.character(tbl.scholar$SYSDATE), "%m/%d/%Y")                      #convert SYSDATE to date only
tbl.scholar[ is.na(tbl.scholar) ] <- 0 # replace na's with 0
# dup.DF(tbl.scholar, "cohort")
colNames <- c("ay_2223", "ay_2324")
# colNames <- list("ay_2223", "ay_2324")
# colNames <- paste0("ay_", c(ay$V1))
# z<-head(paste0("ay_", c(ay$V1)),4)
a <- as.character(rep(head(ay$V1, 1), 4))
b <- head(paste0("ay_", ay$V2), 4)
tbl.scholar1 <- tbl.scholar
names(tbl.scholar1) <- tolower(names(tbl.scholar))
tbl.scholar1 <- tbl.scholar1 %>% mutate_cond(fixed("cohort", ignore_case = TRUE) == currentAY, ay_1819 = ay_1718, ay_1920 = ay_1718, ay_2021 = ay_1718)
tbl.scholar1 <- tbl.scholar1 %>% mutate_cond(fixed("cohort", ignore_case = TRUE) == currentAY + 101, ay_1920 = ay_1819, ay_2021 = ay_1819, ay_2122 = ay_1819)
# tbl.scholar1<-dup.DF(tbl.scholar1, currentAY, 4, "ay_1718", "ay_2324")
# tbl.scholar1<-dup.DF(tbl.scholar1, currentAY, 4, "ay_1718", "ay_2324")
# tbl.scholar1<-dup.DF(tbl.scholar1, currentAY, 4, "ay_1718", colNames)                              #20180606b
# Dynamic Approach to propagate scholarship amount to the ensuing three years ####
# st_pos <- 6                                                                                        #concerned column's start position in the given dataframe
df <- tbl.scholar # data backup
names(df) <- tolower(names(df)) # change column names to lower case since don't know how input will be formatted
# df<-df[c(1:6,15:27,7:14)]
# rename concerned columns as "ay_1718", "ay_1819" etc
# names(df)[st_pos:ncol(df)-4] <- paste("AY", paste0(as.numeric(substr(min(df$cohort), 1, 2)) + 0:(ncol(df) - st_pos),
#                                                 as.numeric(substr(min(df$cohort), 3, 4)) + 0:(ncol(df) - st_pos)),
#                                    sep="_")
# copy "year" column's value to the ensuing three columns
cols <- names(df)[st_pos:(ncol(df) - 4)] # renamed columns (-4) is the number of extraneous columns at the end of the data frame
mapply(
function(x, y)
df[df$cohort == x & df$studentid == y, which(grepl(x, cols)) + (st_pos - 1):(st_pos + 2)] <<-
df[df$cohort == x & df$studentid == y, which(grepl(x, cols)) + (st_pos - 1)],
df$cohort, df$studentid
)
# End of Dynamic Approach ####
# funcCode
fundCode <- c(tbl.Cancels[, 9], tbl.scholarshipAwd[, 4], tbl.scholarshipCohorts[, 4], tbl.GaCommit[, 3]) # concatenate fundCode columns
fundCode <- melt(fundCode) # stack columns on top of each other
fundCode <- fundCode[, 1] # extract the first column only
fundCode <- as.data.table(fundCode) # convert to a data.table
fundCode <- subset(fundCode, fundCode != 0) # remove rows containing zero
fundCode <- unique(fundCode) # extract the unique values
fundCode <- setorder(fundCode, fundCode) # sort the fundCode column
fundCode <- fundCode %>% left_join(select(tbl.GaCommitmentFundList.OSFA, fundCode, fundName), by.x = "fundCode")
fundCode$fundName[is.na(fundCode$fundName)] <- "" # replace na's with blanks in fund name
# jctCode
jctCode <- c(tbl.scholarshipCohorts[, 4], tbl.scholarshipCohorts[, 3]) # concatenate jctCode columns
names(jctCode) <- c("fundCode", "osfaCode") # rename columns
jctCode <- as.data.table(jctCode) # convert to a data.table
jctCode <- subset(jctCode, fundCode != 0 & osfaCode != 0) # remove rows containing zero
jctCode <- unique(jctCode) # extract the unique values
jctCode <- setorder(jctCode, fundCode) # sort the fundCode column
jctCode <- jctCode %>% left_join(select(fundCode, fundCode, fundName), by.x = "fundCode") # add the fundName column
# jctCohortCode
jctCohortCode <- c(tbl.BannerCohorts[, 2], tbl.BannerCohorts[, 5]) # concatenate Banner Cohort columns
names(jctCohortCode) <- c("studentID", "fundCode") # rename columns
jctCohortCode <- as.data.table(jctCohortCode) # convert to a data.table
jctCohortCode <- subset(jctCohortCode, fundCode != 0 & studentID != 0) # remove rows containing zero
jctCohortCode <- unique(jctCohortCode) # extract the unique values
jctCohortCode <- setorder(jctCohortCode, studentID) # sort the studentID column
# jctCountyByZip
# jctCountyZip<-county.regions %>% inner_join(zip_codes, by = c("region" = "fips"))
# jctCountyZip <- jctCountyZip[c(7,10:11,1:6,8:9)]                                                   #reorder
# Lori's Scholoarship data
osfa_1718data <- osfa_1718data[!is.na(osfa_1718data$OSFA.Fund.Number), ]
osfa_1718data <- # regex-student id starts with '8'
osfa_1718data %>%
filter(str_detect(Recipient.Student.ID.., "^8"))
# osfa_1819data<-osfa_1819data[!is.na(osfa_1819data$Recipient.Student.ID..),]
osfa_1819data <- osfa_1819data[!is.na(osfa_1819data$OSFA.Fund.Number), ]
osfa_1819data <- # student id starts with '8'
osfa_1819data %>%
filter(str_detect(Recipient.Student.ID.., "^8")) %>%
mutate(Recipient.Student.ID.. = as.character(Recipient.Student.ID..))
# osfaCode
osfaCode <- c(tbl.BannerCohorts[, 5], tbl.scholarshipAwd[, 3], tbl.scholarshipCohorts[, 3]) # concatenate fundCode columns
osfaCode <- melt(osfaCode) # stack columns on top of each other
osfaCode <- osfaCode[, 1] # extract the first column only
names(osfaCode) <- c("osfaCode") # rename columns
osfaCode <- as.data.table(osfaCode) # convert to a data.table
osfaCode <- subset(osfaCode, osfaCode != 0) # remove rows containing zero
osfaCode <- unique(osfaCode) # extract the unique values
osfaCode <- setorder(osfaCode, osfaCode) # sort the osfaCode column
# studentID
studentID <- c(tbl.BannerCohorts[, 2], tbl.Cancels[, 5], tbl.scholarshipAwd[, 5], tbl.scholarshipCohorts[, 11]) # concatenate studentID columns
studentID <- melt(studentID) # stack columns on top of each other
studentID <- studentID[, 1] # extract the first column only
studentID <- as.data.table(studentID) # convert to a data.table
studentID <- subset(studentID, studentID != 0 & studentID != "") # remove rows containing zero
studentID <- unique(studentID) # extract the unique values
# studentID <- studentID[!apply(is.na(studentID) | studentID == "", 1, all),]                        #remove rows containing blanks & na's
studentID <- setorder(studentID, studentID) # sort the studentID column
# Join three Tables - use `nomatch` argument-> i.e., nomatch-0
tbl.CohortAwd <- tbl.BannerCohorts[tbl.scholarshipAwd, nomatch = 0, on = c("studentID", "osfaCode")][tbl.scholarshipCohorts, nomatch = 0, on = c("studentID", "osfaCode")]
# tbl.CohortAwd<-tbl.BannerCohorts[tbl.scholarshipAwd, nomatch=0, on=c("studentID", "osfaCode")]    #Join Banner Cohorts + scholarshipAwd tables
tbl.CohortAwd <- tbl.CohortAwd %>%
mutate_all(funs(replace(., is.na(.), 0))) # 20180516b
as.numeric(as.character(tbl.CohortAwd$Award)) # covert CohortAwd$Award from character to numeric
tbl.CohortAwdByFY <- data.table(tbl.CohortAwd)[, .(FY, Award)]
tbl.CohortAwdByFY[, meanAwdByFY := mean(Award), by = FY]
x <- tbl.CohortAwd %>%
select(FY, Award) %>%
group_by(FY) %>%
dplyr::summarize(
AvgAward = mean(Award),
MedianAward = as.numeric(median(Award)),
total = n()
) %>%
arrange(FY)
tbl.GaCommit <- tbl.CohortAwd %>%
select(FY, osfaCode, fundCode, AccountName, Requirement, Active, Award, MajorChanges, ReplacementScholar, studentID, NAME, AY_1718, AY_1819, AY_1920, AY_2021, AY_2122, AY_2223, AY_2324, AY_2425, OSFA.Notes, Rural, FundAgreement, message, eMail, Special.Circumstances, SCR.Complete) %>%
group_by(FY, osfaCode, studentID) %>%
mutate_all(funs(replace(., is.na(.), 0)))
tbl.fundBalance <- tbl.GaCommitmentFundList.OSFA %>%
group_by(fundCode, fundName) %>%
select(fundCode, fundName, incomeBalance, principleBalance, invested.Balance) %>%
summarise(incBal = sum(incomeBalance), principleBal = sum(principleBalance), invBal = sum(invested.Balance)) %>%
mutate(totBalFund = incBal + principleBal + invBal) %>%
arrange(fundCode, fundName)
# tbl.fundBalance<-inner_join(tbl.fundBalance, jctCode)
tbl.BannerCohorts[ is.na(tbl.BannerCohorts) ] <- 0
tbl.BannerCohorts %>%
mutate_at(vars(AY_1718, AY_1819, AY_1920, AY_2021, AY_2122, AY_2223, AY_2324, AY_2425), as.numeric)
tbl.studentBalance <- tbl.BannerCohorts %>%
group_by(osfaCode) %>%
select(osfaCode, AY_1718, AY_1819, AY_1920, AY_2021, AY_2122, AY_2223, AY_2324, AY_2425) %>%
summarise(totBalStudent = sum(AY_1718, AY_1819, AY_1920, AY_2021, AY_2122, AY_2223, AY_2324, AY_2425)) %>%
arrange(osfaCode)
# tbl.balance<- inner_join(tbl.fundBalance, tbl.studentBalance, by = "osfaCode")
# Totals preprocessing script.
tbl.fundSummary <- as.data.table(unique.data.frame(select(select(inner_join(tbl.fundBalance, jctCode, by = "fundCode") %>% inner_join(., tbl.studentBalance, by = "osfaCode"), -ends_with(".y")), osfaCode, fundCode:totBalFund, totBalStudent) %>% mutate(totBalRemain = totBalFund - totBalStudent)))
# convert tables to data.tables
fundCode <- data.table(fundCode)
jctCode <- data.table(jctCode)
tbl.CohortAwd <- data.table(tbl.CohortAwd)
tbl.fundBalance <- data.table(tbl.fundBalance)
tbl.GaCommit <- data.table(tbl.GaCommit)
# write output .csv files
write.csv(jctCode, "output/jct_Code.csv", row.names = F)
write.csv(fundCode, "output/tbl_fundCode.csv", row.names = F)
write.csv(jctCohortCode, "output/jct_CohortCode.csv", row.names = F)
write.csv(osfaCode, "output/tbl_osfaCode.csv", row.names = F)
write.csv(studentID, "output/tbl_studentId.csv", row.names = F)
# write.csv(tbl.balance, "output/tbl_balance.csv", row.names=F)
write.csv(tbl.CohortAwd, "output/tbl_CohortAwd.csv", row.names = F)
write.csv(tbl.fundBalance, "output/tbl_fundBalance.csv", row.names = F)
write.csv(tbl.fundSummary, "output/tbl_fundSummary.csv", row.names = F)
write.csv(tbl.GaCommit, "output/tbl_GaCommit.csv", row.names = F)
write.csv(tbl.scholar, "output/tbl_scholar.csv", row.names = F)
write.csv(df, "output/tbl_scholar2.csv", row.names = F) # output from the copy "year" column's value to the ensuing three columns process
write.csv(tbl.studentBalance, "output/tbl_studentBalance.csv", row.names = F)
write.xlsx(jctCode, "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_jctCode", append = FALSE)
write.xlsx(fundCode, "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tblFundCode", append = TRUE)
write.xlsx(jctCohortCode, "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_jctCohortCode", append = TRUE)
write.xlsx(osfaCode, "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_osfaCode", append = TRUE)
write.xlsx(studentID, "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_studentID", append = TRUE)
write.xlsx(tbl.scholar, "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_scholar", append = TRUE)
# write.xlsx(as.data.frame(tbl.balance), "output/tbl_scholarships.xlsx", row.names=F, sheetName="tbl_balance", append=TRUE)
write.xlsx(as.data.frame(tbl.BannerCohorts), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_bannerCohorts", append = TRUE)
write.xlsx(as.data.frame(tbl.CohortAwd), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_cohortAwd", append = TRUE)
write.xlsx(as.data.frame(tbl.fundBalance), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_fundBalance", append = TRUE)
write.xlsx(as.data.frame(tbl.GaCommit), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_GaCommit", append = TRUE)
write.xlsx(as.data.frame(tbl.GaCommitmentFundList.OSFA), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_GaCommitFundList", append = TRUE)
write.xlsx(as.data.frame(tbl.studentBalance), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl_studentBalance", append = TRUE)
write.xlsx(as.data.frame(tbl.fundSummary), "output/tbl_scholarships.xlsx", row.names = F, sheetName = "tbl.fundSummary", append = TRUE)
names(tbl.scholar) <- tolower(names(tbl.scholar))
names(tbl.scholar1) <- tolower(names(tbl.scholar1))
write.xlsx(tbl.scholar, "output/tbl_scholar.xlsx", row.names = F, sheetName = "tbl_scholar", append = FALSE)
write.xlsx(tbl.scholar1, "output/tbl_scholar1.xlsx", row.names = F, sheetName = "tbl_scholar1", append = FALSE)
write.xlsx(df, "output/tbl_scholar2.xlsx", row.names = F, sheetName = "tbl_scholar2", append = FALSE)
tbl.scholar1 <- split(tbl.scholar, tbl.scholar$cohort)
lapply(
names(tbl.scholar1),
function(x) write.xlsx(as.data.frame(tbl.scholar1[x]),
file = "output/tbl_scholar.xlsx",
row.names = F,
sheetName = x,
append = TRUE
)
)
#write.xlsx(df$sheet1, file = "myfile.xlsx", sheetName="sh1", append=TRUE)
#tbl.scholar2 <- split(df, df$cohort) # separate the dataframe by cohort year
tbl.scholar2<- split(df<-data.table(df)[df$cohort ==  df$last_ay_eligible, (st_pos + 1) : (st_pos + 3)  := 0], df$cohort) # zero out & separate the dataframe by cohort year
lapply(
names(tbl.scholar2),
function(x) write.xlsx(as.data.frame(tbl.scholar2[x]),
file = "output/tbl_scholar2.xlsx",
row.names = F,
sheetName = x,
append = TRUE
)
)
tbl.scholar2_current_1 <- unnest(tbl.scholar2[[as.character(currentAY + 101)]]) %>%
mutate(studentid = as.character(studentid))
exception_list = replicate(n = 10,
expr = {data.table(data.frame(matrix("", ncol = 5, nrow = 0)))},
simplify = F)
anti1718a <-
anti_join(osfa_1718data, tbl.scholar2[["1718"]], by = c("Recipient.Student.ID.." = "studentid")) %>% # find unmatched
rename_at("OSFA.Fund.Number", ~"fundcode") %>%
rename_at("Recipient.Student.ID..", ~"studentid") %>%
unite(name, Last.Name, First.Name, sep = ", ") %>%
mutate(cohort = currentAY, origin="OSFA")
anti1718b <- anti_join(tbl.scholar2[["1718"]], osfa_1718data, by = c("studentid" = "Recipient.Student.ID..")) %>% # find unmatched
mutate(origin = "System")
anti1718c <- inner_join(anti1718a, anti1718b, by = "studentid") %>%
rename_at(
.vars = vars(ends_with(".x")), #  find all columns that end with .x to ""
.funs = funs(sub("[.]x$", "", .))   #  rename all columns that end with .x to ""
) %>%
mutate(origin = "")
common <- intersect(names(anti1718a), names(anti1718b)) # https://stackoverflow.com/questions/16674377/combine-two-dataframes-in-r-based-on-common-columns
#anti1718 <- anti1718[c(4,2:3,1)] %>%  # reorder
anti1718 <- rbind(anti1718a[, common], anti1718b[, common], anti1718c[, common]) %>%
select(4:5,2:3,1) %>%  # reorder
arrange(studentid)
anti1819a <- anti_join(osfa_1819data, tbl.scholar2_current_1, by = c("Recipient.Student.ID.." = "studentid")) # find unmatched
anti1819b <- anti_join(tbl.scholar2_current_1, osfa_1819data, by = c("studentid" = "Recipient.Student.ID..")) # find unmatched
write.xlsx(anti1718a, "output/anti1718.xlsx", row.names = F, sheetName = "tbl_anti1718a", append = FALSE)
write.xlsx(anti1718b, "output/anti1718.xlsx", row.names = F, sheetName = "tbl_anti1718b", append = TRUE)
write.xlsx(anti1819a, "output/anti1819.xlsx", row.names = F, sheetName = "tbl_anti1819a", append = FALSE)
write.xlsx(anti1819b, "output/anti1819.xlsx", row.names = F, sheetName = "tbl_anti1819b", append = TRUE)
# write output .xlsx files
# write.xlsx(fundCode, "output/tbl_fundCode.xlsx", row.names=F, sheetName="tblFundCode", append=FALSE)
# write.xlsx(jctCode, "output/tbl_jctCode.xlsx", row.names=F, sheetName="tbl_jctCode")
# write.xlsx(jctCohortCode, "output/tbl_jctCohortCode.xlsx", row.names=F, sheetName="tbl_jctCohortCode")
# write.xlsx(osfaCode, "output/tbl_osfaCode.xlsx", row.names=F, sheetName="tbl_osfaCode")
# write.xlsx(studentID, "output/tbl_studentID.xlsx", row.names=F, sheetName="tbl_studentID")
# write.xlsx(as.data.frame(tbl.balance), "output/tbl_balance.xlsx", row.names=F, sheetName="tbl_balance")
# write.xlsx(as.data.frame(tbl.BannerCohorts), "output/tbl_bannerCohorts.xlsx", row.names=F, sheetName="tbl_bannerCohorts")
# write.xlsx(as.data.frame(tbl.CohortAwd), "output/tbl_cohortAwd.xlsx", row.names=F, sheetName="tbl_cohortAwd")
# write.xlsx(as.data.frame(tbl.fundBalance), "output/tbl_fundBalance.xlsx", row.names=F, sheetName="tbl_fundBalance")
# write.xlsx(as.data.frame(tbl.GaCommit), "output/tbl_GaCommit.xlsx", row.names=F, sheetName="tbl_GaCommit")
# write.xlsx(as.data.frame(tbl.GaCommitmentFundList.OSFA), "output/tbl_GaCommitFundList.xlsx", row.names=F, sheetName="tbl_GaCommitFundList")
# write.xlsx(tbl.scholar, "output/tbl_scholar.xlsx", row.names=F, sheetName="tbl_scholar")
# write.xlsx(as.data.frame(tbl.studentBalance), "output/tbl_studentBalance.xlsx", row.names=F, sheetName="tbl_studentBalance")
# RegEx
# ([\sI])\w+
# zfundcode <- fundCode
# as.data.table(zfundcode)
# zfundcode<-zfundcode[tbl.GaCommitmentFundList.OSFA,mult = "first",on = "fundCode", nomatch=0]
# zfundcode<-zfundcode[, c(1,4)]
# zfundcode<-zfundcode[order(fundCode, fundName)][, .SD[c(1)], by=fundCode]
# zfundcode$fundName<-gsub(pattern = "[IV|X]|\\(1\\)|\\(2\\)", "", zfundcode$fundName)
# zfundcode$fundName<-trim(zfundcode$fundName)
# zfundcode$fundName
# zfundcode < left_join(zfundcode,jctCode, by = "fundCode")
# PIPES
# jctCode  <- c(tbl.scholarshipCohorts[,3], tbl.scholarshipCohorts[,4])                                         #concatenate scholarship codes
# jctCodes <- jctCode %>%
#     as.data.table(jctCode) %>%
#     setorder(jctCode, AccountNumber) %>%
#     unique(jctCode)
# tbl.BannerCohorts$studentID <- as.character(as.numeric(tbl.BannerCohorts$studentID))
# tbl.Cancels$studentID <- as.character(as.numeric(tbl.Cancels$studentID))
# tbl.scholarshipAwd$studentID <- as.character(as.numeric(tbl.scholarshipAwd$studentID))
# tbl.scholarshipCohorts$studentID <- as.character(as.numeric(tbl.scholarshipCohorts$studentID))
# tbl.Cancels$fundCode <- as.character(as.numeric(tbl.Cancels$fundCode))
# tbl.scholarshipAwd$fundCode <- as.character(as.numeric(tbl.scholarshipAwd$fundCode))
# tbl.scholarshipCohorts$fundCode <- as.character(as.numeric(tbl.scholarshipCohorts$fundCode))
# tbl.BannerCohorts.osfaCode <-as.character(as.numeric(tbl.BannerCohorts$osfaCode))
# tbl.scholarshipAwd$osfaCode <- as.character(as.numeric(tbl.scholarshipAwd$osfaCode))
# tbl.scholarshipCohorts$osfaCode <- as.character(as.numeric(tbl.scholarshipCohorts$osfaCode))
# as.character(c(tbl.BannerCohorts$studentID, tbl.Cancels$studentID, tbl.scholarshipAwd$studentID, tbl.scholarshipCohorts$studentID))
# as.character(c(tbl.GaCommitmentFundList.OSFA$fundCode, tbl.scholarshipAwd$fundCode))
# as.character(c(tbl.BannerCohorts$osfaCode,tbl.scholarshipAwd$osfaCode))
# Ensure key's are formatted as character
# tbl.BannerCohorts  %>% mutate_if(is.integer,as.character)
# tbl.Cancels %>% mutate_if(is.integer,as.character)
# tbl.scholarshipAwd %>% mutate_if(is.integer,as.character)
# tbl.scholarshipCohorts %>% mutate_if(is.integer,as.character)
# #
# tbl.BannerCohorts[] <- lapply(tbl.BannerCohorts, function(x) if(is.numeric(x)) as.character(x) else x)
# tbl.Cancels[] <- lapply(tbl.Cancels, function(x) if(is.numeric(x)) as.character(x) else x)
# tbl.scholarshipAwd[] <- lapply(tbl.scholarshipAwd, function(x) if(is.numeric(x)) as.character(x) else x)
# tbl.scholarshipCohorts[] <- lapply(tbl.scholarshipCohorts, function(x) if(is.numeric(x)) as.character(x) else x)
setkey(tbl.GaCommit, FY)
chart.GaCommitByYear <-
tbl.GaCommit[, sum(Award), by = FY]
chart.GaCommitByYear <-
rename.columns(chart.GaCommitByYear, list(V1 = "fundAmount"))
chart.GaCommitByFund01 <-
tbl.GaCommit %>%
group_by(FY, osfaCode, AccountName) %>%
select(FY, osfaCode, AccountName, Award) %>%
summarise(sum(Award))
chart.GaCommitByFund02 <-
tbl.GaCommit[, sum(Award), by = list(FY, osfaCode, AccountName)]
chart.GaCommitByFund02 <-
rename.columns(chart.GaCommitByFund02, list(V1 = "fundAmount"))
# setnames(chart.GaCommitByFund02, c("V1", "fundAmount"))
chart.GaCommitByUnit <- tbl.GaCommitmentFundList.OSFA[, sum(totalCommitment), by = list(fundraisingUnit)]
chart.GaCommitByUnit <- rename.columns(chart.GaCommitByUnit, list(V1 = "fundAmount"))
chart.rangefundAmt <- tbl.fundSummary %>%
mutate(cuts = cut(totBalRemain, c(-100000, 0, 100000, 200000, 300000, 400000, Inf))) %>%
group_by(cuts) %>%
summarise(n = n())
# https://stackoverflow.com/questions/28190435/changing-factor-levels-with-dplyr-mutate
chart.rangefundAmt <- chart.rangefundAmt %>%
mutate(cuts = factor(cuts, labels = c(
"$(100000-$000,000)",
"$000,000-$100,000",
"$100,000-$200,000",
"$200,000-$300,000",
"$300,000-$400,000"
)))
chart.GaCommitByZip <-
data.table(df) %>%
group_by(zip) %>%
rename_at("zip",~"zip5") %>%                                                                      #rename zip to zip5
summarise_at(vars(ay_1718:ay_1718), funs(n(), sum(., na.rm = TRUE))) %>%
mutate(zip=substr(zip5,1,5)) %>%
mutate_at(vars(starts_with("zip")),funs(as.character)) %>%                                        #convert zip columns from integer to character
select(zip, zip5, n, sum) %>%                                                                     #rearrange columns
rename_at("sum",~"value") %>%                                                                     #rename zip to zip5
arrange(zip)
# names(df[2])<-'Total'
chart.GaCommitByZip <- data.table(chart.GaCommitByZip) # convert chart to a data.table
# chart.GaCommitByZip <- chart.GaCommitByZip[, zip := as.character(zip)]                            #convert zip columns from integer to character
# names(chart.GaCommitByZip)[1] <- "zip"
# chart.GaCommitByZip<-inner_join(chart.GaCommitByZip, zipcode)                                     #merge zip code table with GaCommitByZip table
chart.GaCommitByCounty <-
chart.GaCommitByZip %>%
left_join(jctCountyZip) %>%
select(region, value) %>%
group_by(region) %>%
arrange(region) %>%
summarise(value = sum(value))
chart.degreeByCohort <-
data.table(tbl.scholar) %>%
mutate(cohort = as.character(cohort)) %>%
select(cohort, degree) %>%
group_by(cohort) %>%
count(degree)
# From on a categorical column variable
graph.degreeByCohort <- ggplot(chart.degreeByCohort, aes(degree))
graph.degreeByCohort <- graph.degreeByCohort + theme_solarized(light = FALSE)
graph.degreeByCohort <- graph.degreeByCohort +
geom_bar(aes(weight = n, fill = cohort)) +
theme(
plot.title = element_text(colour = "white", face = "bold"),
plot.subtitle = element_text(colour = "white"),
axis.title.x = element_text(colour = "SteelBlue1"),
axis.text.x = element_text(angle = 65, colour = "green", vjust = 0.6),
axis.title.y = element_text(colour = "SteelBlue1"),
axis.text.y = element_text(colour = "green")
) +
labs(
title = "Categorywise Degree by Cohort Chart",
subtitle = "Degree by Cohort",
caption = "Source: Degree from 'tbl.scholar' dataset"
)
plot(graph.degreeByCohort)
# TreeMap
treemap(chart.degreeByCohort, # data frame object
index = c("cohort", "degree"), # list of categorical variables
vSize = "n", # quantitative variable
type = "index", # Type sets the organization and color scheme of the treemap
palette = "Greens", # Select the color palette from the RColorBrewer presets or make your own.
title = "Degree by Cohorts TreeMap", # Customize the title
fontsize.title = 14 # Change the font size of the title
)
# plot(graph.degreeByCohort)
# map<-get_map(location='united states', zoom=4, maptype = "terrain",
#              source='google',color='color')
# georgia<-ggmap(map) + geom_point(
#     aes(x=longitude, y=latitude, show_guide = TRUE, colour=Median),
#     data=chart.GaCommitByZip, alpha=.8, na.rm = T)  +
#     scale_color_gradient(low="beige", high="blue")
# plot(georgia)
write.csv(chart.GaCommitByCounty, "graphs/chart.GaCommitByCounty.csv", row.names = F)
write.csv(chart.GaCommitByUnit, "graphs/chart.GaCommitByUnit.csv", row.names = F)
write.csv(chart.GaCommitByYear, "graphs/chart.GaCommitByYear.csv", row.names = F)
write.csv(chart.GaCommitByZip, "graphs/chart.GaCommitByZip.csv", row.names = F)
write.csv(chart.rangefundAmt, "graphs/chart.rangefundAmt.csv", row.names = F)
write.csv(chart.GaCommitByZip %>% left_join(jctCountyZip), "graphs/list.GaCommitByCount.csv", row.names = F)
g <- ggplot(tbl.fundSummary, aes(fundCode, totBalRemain)) + geom_point() + geom_smooth(method = "lm")
plot(g)
#--------------
# Create Theme
#--------------
# BASIC THEME
theme.chart_BASIC <-
theme(legend.position = "none") +
theme(plot.title = element_text(size = 26, family = "Trebuchet MS", face = "bold", hjust = 0, color = "#666666")) +
theme(axis.title = element_text(size = 18, family = "Trebuchet MS", face = "bold", color = "#666666")) +
theme(axis.title.y = element_text(angle = 0))
# SCATTERPLOT THEME
theme.chart_SCATTER <- theme.chart_BASIC +
theme(axis.title.x = element_text(hjust = 0, vjust = -.5))
# HISTOGRAM THEME
theme.chart_HIST <- theme.chart_BASIC +
theme(axis.title.x = element_text(hjust = 0, vjust = -.5))
# SMALL MULTIPLE THEME
theme.chart_SMALLM <- theme.chart_BASIC +
theme(panel.grid.minor = element_blank()) +
theme(strip.text.x = element_text(size = 16, family = "Trebuchet MS", face = "bold", color = "#666666"))
library(RDCOMClient)
# Open a specific workbook in Excel:
xlApp <- COMCreate("Excel.Application")
xlWbk <- xlApp$Workbooks()$Open("S:\\ScholarshipsProject\\R\\ScholarshipProject\\output\\scholarCompare.xlsm")
# this line of code might be necessary if you want to see your spreadsheet:
xlApp[["Visible"]] <- FALSE
# Run the macro called "MyMacro":
xlApp$Run("scholarDiff")
# Close the workbook and quit the app:
xlWbk$Close(FALSE)
xlApp$Quit()
# Release resources:
rm(xlWbk, xlApp)
gc()
# read in the florida county shapefile
# ga <- readShapePoly("ga.shp", repair=TRUE, IDvar="NAME")
# make it work nicely with ggplot
# ga.f <- fortify(ga, region="NAME")
map.GaCommitByZip <- data.table(df) %>%
group_by(zip) %>%
summarise_at(vars(ay_1718:ay_1718), funs(n(), sum(., na.rm = TRUE))) %>%
arrange(zip)
names(map.GaCommitByZip)[2:3] <- c("Number", "TotalAmount")
# start the plot
# gg <- ggplot(map.GaCommitByZip[[3]])
map.GaCommitByCounty <- county_choropleth(chart.GaCommitByCounty,
title = "Scholarships by County",
legend = "Scholarship Amount",
num_colors = 1,
state_zoom = c("georgia")
)
plot(map.GaCommitByCounty)
states <- map_data("state")
counties <- map_data("county")
ga_df <- subset(states, region == "georgia")
ga_county <- subset(counties, region == "georgia")
georgia <- subset(states, region %in% c("georgia"))
ggplot(data = georgia) +
geom_polygon(aes(x = long, y = lat, group = group), fill = "palegreen", color = "black") +
coord_fixed(1.3)
ga_base <- ggplot(data = ga_df, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
ga_base + theme_nothing()
ga_base + theme_nothing() +
geom_polygon(data = ga_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA) # get the state border back on top
source('S:/ScholarshipsProject/R/ScholarshipProject/ScholarshipProject.r', echo=TRUE)
source('S:/ScholarshipsProject/R/ScholarshipProject/ScholarshipProject.r', echo=TRUE)
source('S:/ScholarshipsProject/R/ScholarshipProject/ScholarshipProject.r', echo=TRUE)
anti1819a <- anti_join(osfa_1819data, tbl.scholar2_current_1, by = c("Recipient.Student.ID.." = "studentid"))
anti1819b <- anti_join(tbl.scholar2_current_1, osfa_1819data, by = c("studentid" = "Recipient.Student.ID.."))
write.xlsx(anti1819a, "output/anti1819.xlsx", row.names = F, sheetName = "tbl_anti1819a", append = FALSE)
